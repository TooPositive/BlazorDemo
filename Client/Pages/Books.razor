@*@page "/books"
@using BlazorApp.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json;
@inject HttpClient Http

    <div class="container">
        <h1>Simple Book Shop</h1>
        <button class="btn btn-primary" @onclick="RefreshBookAsync" disabled="@(!IsConnected())">Refresh Books</button>
    </div>
    @if (books == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Author</th>
                    <th>Title</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in books)
                {
                    @if (!book.IsBought)
                    {
                        <tr>
                            <td>@book.Author </td>
                            <td>@book.Title</td>
                            <td>@book.Price</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }

    @code {
        private Book[] books;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                await InitSignalr();
                books = await Http.GetFromJsonAsync<Book[]>("/api/AllBooks");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }

        private HubConnection hubConnection;

        async Task InitSignalr()
        {

            hubConnection = new HubConnectionBuilder()
                .WithUrl($@"{Http.BaseAddress}api/")
                .Build();


            hubConnection.On<string>("booksRefreshed", (jsonBooks) =>
            {
                Console.WriteLine("Book refreshed");
                var apiBooks = JsonConvert.DeserializeObject<Book[]>(jsonBooks);
                this.books = apiBooks;
                StateHasChanged();
            });

            await hubConnection.StartAsync();
        }

        async Task RefreshBookAsync()
        {
            await Http.PostAsync($"/api/RefreshBooks", null);
        }

        public bool IsConnected()
        {
            try
            {
                return hubConnection != null & hubConnection.State == HubConnectionState.Connected;
            }
            catch (Exception e)
            {
                Console.WriteLine($"Cannot get signalR connection state. {e.Message}");
                return false;
            }
        }
    }*@
